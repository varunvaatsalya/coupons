// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name add-age-to-user  // old method

// npx prisma migrate dev --name add-age-to-user --create-only   // for check purpose
// npx prisma migrate dev   // then run this for db update

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------- User Model -------------------

model User {
  id                String    @id @default(uuid()) @db.Uuid
  uid               String    @db.VarChar(255)
  name              String?   @db.VarChar(60)
  email             String    @unique @db.VarChar(255)
  password          String    @db.VarChar(255)
  role              Role
  editPermission    Boolean   @default(false)
  lastLogoutByAdmin DateTime?
  isLogoutPending   Boolean?  @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt

  merchantsCreated Merchant[] @relation("CreatedMerchants")
  offersCreated    Offer[]    @relation("CreatedOffers")
}

enum Role {
  default_admin
  admin
  owner
}

// ------------------- Admin Model -------------------

model Admin {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

// ------------------- Role Logout Model -------------------

model RoleLogout {
  id           String   @id @default(uuid()) @db.Uuid
  role         Role     @unique
  lastLogoutAt DateTime
}

// ------------------- Login History Model -------------------

model LoginHistory {
  id                 String      @id @default(uuid()) @db.Uuid
  attemptedUserEmail String      @db.VarChar(255)
  role               Role?
  status             LoginStatus
  ipAddress          String?     @db.VarChar(255)
  userAgent          String?     @db.VarChar(255)
  loginTime          DateTime    @default(now())

  @@index([loginTime])
}

enum LoginStatus {
  success
  failed
}

// ------------------- Merchant Model -------------------

model Merchant {
  id                    String              @id @default(uuid()) @db.Uuid
  merchantName          String?
  type                  String?
  logoUrl               String?
  logoPublicId          String?
  status                String              @default("draft")
  visibility            String?
  countries             GeographicCountry[] @relation("MerchantCountries")
  networkId             String?             @db.Uuid
  network               Network?            @relation(fields: [networkId], references: [id])
  howToText             HowToStep[]
  howToOverviewImageUrl String?
  overviewImageUrl      String?
  networkMerchantId     String?
  isCPTAvailable        Boolean             @default(false)
  androidAppUrl         String?
  iosAppUrl             String?
  windowsAppUrl         String?

  offers        Offer[]
  formState     String   @default("draft") // "draft" | "submitted"
  dateCreated   DateTime @default(now())
  createdByRole String?
  createdById   String?  @db.Uuid
  createdBy     User?    @relation("CreatedMerchants", fields: [createdById], references: [id])

  homeSectionItems HomeSectionItem[]      @relation("MerchantHomeSectionItems")
  localizations    MerchantLocalization[]
}

model MerchantLocalization {
  id         String            @id @default(uuid()) @db.Uuid
  merchantId String            @db.Uuid
  countryId  String            @db.Uuid
  merchant   Merchant          @relation(fields: [merchantId], references: [id])
  country    GeographicCountry @relation(fields: [countryId], references: [id])

  merchantSeoName       String?
  description           String?
  translatedDescription String?
  merchantUrl           String?
  affiliateUrl          String?
  isPriority            Boolean  @default(false)
  isPremium             Boolean  @default(false)
  pageTitle             String?
  metaDescription       String?
  metaKeywords          String[]
  pageHeading           String?

  @@unique([merchantId, countryId]) // avoid duplicates per country
}

// ------------------- Network Model -------------------

model Network {
  id         String     @id @default(uuid()) @db.Uuid
  name       String     @unique
  parameters Json // { "subid": "{affiliateId}", "clickid": "{clickId}" }
  createdAt  DateTime   @default(now())
  merchants  Merchant[]

  @@map("networks")
}

model HowToStep {
  id         String   @id @default(uuid())
  merchantId String   @db.Uuid
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  stepNumber  Int // e.g., 1, 2, 3...
  title       String? // Optional short title like "Go to Website"
  description String?
  imageUrl    String? // Optional screenshot

  createdAt DateTime @default(now())
}

model MpuAd {
  id String @id @default(uuid())

  targetType String // e.g. "Merchant", "Offer", "Product", "Category"
  targetId   String // UUID of the related model

  imageUrl    String? // Either this...
  htmlContent String? // ...or this

  order     Int? // Optional: to control display order
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([targetType, targetId])
}

// ------------------- Image Store Model - for track image records -------------------

model ImageAsset {
  id        String   @id @default(uuid())
  url       String
  publicId  String   @unique
  tag       String? // Optional tag for categorization
  createdAt DateTime @default(now())
}

model MerchantType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GeographicCountry {
  id             String   @id @default(uuid()) @db.Uuid
  name           String   @unique
  currencyCode   String   @unique // ISO codes like 'INR', 'USD'
  currencySymbol String? // Optional, e.g. â‚¹ or $
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  offers     Offer[]
  merchants  Merchant[] @relation("MerchantCountries")
  categories Category[] @relation("CategoryCountries")

  merchantLocalizations MerchantLocalization[]
  localizations         CategoryLocalization[]
}

model Category {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  icon      String?
  countries GeographicCountry[] @relation("CategoryCountries")

  parentId String?    @db.Uuid
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  path     String     @default("") // "home/fashion/mens"
  level    Int        @default(0)

  navbarOrder   Int?
  offersCurrent Offer[]       @relation("CurrentCategories")
  offersAdded   Offer[]       @relation("AddedCategories")
  homeSections  HomeSection[] @relation("CategoryToHomeSection")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  localizations CategoryLocalization[]

  @@index([path])
}

model CategoryLocalization {
  id         String @id @default(uuid()) @db.Uuid
  categoryId String @db.Uuid
  countryId  String @db.Uuid

  category Category          @relation(fields: [categoryId], references: [id])
  country  GeographicCountry @relation(fields: [countryId], references: [id])

  translatedName  String?
  description     String?
  pageTitle       String?
  metaDescription String?
  metaKeywords    String[]

  @@unique([categoryId, countryId])
}

model Offer {
  id                String     @id @default(uuid()) @db.Uuid
  offerReference    String?    @unique
  imageUrl          String?
  imagePublicId     String?
  merchantId        String?    @db.Uuid
  merchant          Merchant?  @relation(fields: [merchantId], references: [id])
  offerType         String?
  voucherCode       String?
  currentCategories Category[] @relation("CurrentCategories")
  addedCategories   Category[] @relation("AddedCategories")
  statusManual      String?    @default("draft")
  merchantOfferUrl  String?
  offerClickUrl     String?

  offerHeadline   String?
  offerTitle      String?
  idealFeedsTitle String?
  discountType    String? // "Percentage" or "Fixed"
  discountValue   Float?
  description     String?
  idealFeedsDesc  String?
  termsConditions String?

  minCartValue      Float?
  brandRestrictions String?
  userRestrictions  String?
  startDate         DateTime?
  endDate           DateTime?

  displayOrder String? // e.g. "Default"
  isExclusive  Boolean @default(false)
  isFeatured   Boolean @default(false)
  isHotDeal    Boolean @default(false)
  isNewsletter Boolean @default(false)

  countryId        String            @db.Uuid
  country          GeographicCountry @relation(fields: [countryId], references: [id])
  cashbackId       String? // If linked to a cashback table
  commission       Float?
  sharedCommission Float?

  ownerAgency   String?
  createdAt     DateTime @default(now())
  createdByRole String?
  createdById   String?  @db.Uuid
  createdBy     User?    @relation("CreatedOffers", fields: [createdById], references: [id])

  homeSectionItems HomeSectionItem[] @relation("OfferHomeSectionItems")
}

model offerType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarouselImage {
  id       String @id @default(uuid()) @db.Uuid
  name     String // Admin defined title for banner
  position Float?

  largeUrl  String // Desktop
  mediumUrl String // Tablet
  smallUrl  String // Mobile

  largeId  String // Cloudinary public_id for delete
  mediumId String
  smallId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomeSection {
  id         String          @id @default(uuid()) @db.Uuid
  type       HomeSectionType
  label      String
  categoryId String?         @db.Uuid
  category   Category?       @relation("CategoryToHomeSection", fields: [categoryId], references: [id])
  cardStyle  HomeCardStyle
  position   Int

  items     HomeSectionItem[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model HomeSectionItem {
  id        String      @id @default(uuid()) @db.Uuid
  sectionId String      @db.Uuid
  section   HomeSection @relation(fields: [sectionId], references: [id])

  offerId String? @db.Uuid
  offer   Offer?  @relation("OfferHomeSectionItems", fields: [offerId], references: [id])

  merchantId String?   @db.Uuid
  merchant   Merchant? @relation("MerchantHomeSectionItems", fields: [merchantId], references: [id])

  label         String?
  link          String?
  backgroundUrl String?
  publicId      String?
  position      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum HomeSectionType {
  TOP_OFFERS
  CATEGORY_OFFERS
  TOP_MERCHANTS
  LINK_BUTTONS
}

enum HomeCardStyle {
  SIMPLE_BG // small card with just image + title
  BG_WITH_LOGO // large card with background + logo
}

model Folder {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique
  parentId   String?  @db.Uuid
  parent     Folder?  @relation("SubFolders", fields: [parentId], references: [id])
  subFolders Folder[] @relation("SubFolders")
  files      File[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model File {
  id         String   @id @default(uuid()) @db.Uuid
  folderId   String   @db.Uuid
  folder     Folder   @relation(fields: [folderId], references: [id])
  fileName   String
  filePath   String   @unique
  fileId     String   @unique
  fileType   FileType
  size       Int? // File size in bytes
  isFavorite Boolean  @default(false)
  mimeType   String? // eg: image/png, video/mp4
  keywords   String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // @@unique([folderId, fileName])
}

enum FileType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}
