// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name add-age-to-user

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------- User Model -------------------

model User {
  id                String    @id @default(uuid()) @db.Uuid
  uid               String    @db.VarChar(255)
  name              String?   @db.VarChar(60)
  email             String    @unique @db.VarChar(255)
  password          String    @db.VarChar(255)
  role              Role
  editPermission    Boolean   @default(false)
  lastLogoutByAdmin DateTime?
  isLogoutPending   Boolean?  @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
}

enum Role {
  default_admin
  admin
  owner
}

// ------------------- Admin Model -------------------

model Admin {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

// ------------------- Role Logout Model -------------------

model RoleLogout {
  id           String   @id @default(uuid()) @db.Uuid
  role         Role     @unique
  lastLogoutAt DateTime
}

// ------------------- Login History Model -------------------

model LoginHistory {
  id                 String      @id @default(uuid()) @db.Uuid
  attemptedUserEmail String      @db.VarChar(255)
  role               Role?
  status             LoginStatus
  ipAddress          String?     @db.VarChar(255)
  userAgent          String?     @db.VarChar(255)
  loginTime          DateTime    @default(now())

  @@index([loginTime])
}

enum LoginStatus {
  success
  failed
}

// ------------------- Merchant Model -------------------

model Merchant {
  id                    String      @id @default(uuid()) @db.Uuid
  merchantName          String?
  merchantSeoName       String?
  description           String?
  translatedDescription String?
  type                  String?
  logoUrl               String?
  logoPublicId          String?
  status                String?
  visibility            String?
  geographicMarket      String?
  networkId             String?     @db.Uuid
  network               Network?    @relation(fields: [networkId], references: [id])
  currency              String?
  staff                 String?
  merchantUrl           String?
  affiliateUrl          String?
  isPriority            Boolean     @default(false)
  isPremium             Boolean     @default(false)
  pageTitle             String?
  metaDescription       String?
  metaKeywords          String[]
  pageHeading           String?
  howToText             HowToStep[]
  howToOverviewImageUrl String?
  overviewImageUrl      String?
  networkMerchantId     String?
  isCPTAvailable        Boolean     @default(false)
  androidAppUrl         String?
  iosAppUrl             String?
  windowsAppUrl         String?

  formState   String   @default("draft") // "draft" | "completed"
  dateCreated DateTime @default(now())
  createdBy   String?
}

// ------------------- Network Model -------------------

model Network {
  id         String     @id @default(uuid()) @db.Uuid
  name       String     @unique
  parameters Json // { "subid": "{affiliateId}", "clickid": "{clickId}" }
  createdAt  DateTime   @default(now())
  merchants  Merchant[]

  @@map("networks")
}

model HowToStep {
  id         String   @id @default(uuid())
  merchantId String   @db.Uuid
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  stepNumber  Int // e.g., 1, 2, 3...
  title       String? // Optional short title like "Go to Website"
  description String
  imageUrl    String? // Optional screenshot

  createdAt DateTime @default(now())
}

model MpuAd {
  id String @id @default(uuid())

  targetType String // e.g. "Merchant", "Offer", "Product", "Category"
  targetId   String // UUID of the related model

  imageUrl    String? // Either this...
  htmlContent String? // ...or this

  order     Int? // Optional: to control display order
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([targetType, targetId])
}

// ------------------- Image Store Model - for track image records -------------------

model ImageAsset {
  id        String   @id @default(uuid())
  url       String
  publicId  String   @unique
  tag       String? // Optional tag for categorization
  createdAt DateTime @default(now())
}

model MerchantType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MerchantStatus {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GeographicMarket {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Currency {
  id        String   @id @default(cuid())
  code      String   @unique // ISO codes like 'INR', 'USD'
  symbol    String? // Optional, e.g. â‚¹ or $
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
